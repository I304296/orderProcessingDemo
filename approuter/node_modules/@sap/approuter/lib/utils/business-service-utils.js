'use strict';

var xsenv = require('@sap/xsenv');
var NodeCache = require('node-cache');
var destinationUtils = require('./destination-utils');
var destinationBSCredentialsCache = new NodeCache({stdTTL: 300, checkperiod: 320});
var request = require('request');
var urlUtils = require('./url-utils');
var sessionExt = require('./session-ext');
var url = require('url');

module.exports = {
  getCredentials: function(serviceName, ignoreDots, req) {
    try {
      return xsenv.serviceCredentials(function (service) {
        var vcapSrvServiceName;
        if (service.credentials && service.credentials['sap.cloud.service.alias']) {
          vcapSrvServiceName = ignoreDots ? service.credentials['sap.cloud.service.alias'].replace(/\./g, '') : service.credentials['sap.cloud.service.alias'];
          if (vcapSrvServiceName === serviceName) {
            return true;
          }
        }

        if (service.credentials && service.credentials['sap.cloud.service']) {
          vcapSrvServiceName = ignoreDots ? service.credentials['sap.cloud.service'].replace(/\./g, '') : service.credentials['sap.cloud.service'];
          if (vcapSrvServiceName === serviceName) {
            return true;
          }
        }

        if (service.tags) {
          for (var i = 0; i < service.tags.length; i++) {
            vcapSrvServiceName = ignoreDots ? service.tags[i].replace(/\./g, '') : service.tags[i];
            if (serviceName === vcapSrvServiceName) {
              return true;
            }
          }
        }
        return false;
      });
    }
    catch (e) {
      return getBSDestination(serviceName, ignoreDots, req);
    }
  },
  cacheBSDestinations: function(req, cb){
    var destinationBSCredentials = req.session && req.session.destinationBSCredentials ? req.session.destinationBSCredentials : destinationBSCredentialsCache.get(req.tenant);
    var destinationBSCredentialsEmpty = !destinationBSCredentials || !Object.keys(destinationBSCredentials).length ? true : false;
    if (!destinationBSCredentialsEmpty && req.session && !req.session.destinationBSCredentials){
      sessionExt.update(req.session, function(session) {
        session.destinationBSCredentials = destinationBSCredentials;
      });
    }
    if (destinationBSCredentialsEmpty){
      destinationBSCredentials = {};
      destinationUtils.getDestinationsByTenant(req.tenant, function(err,destinationsData){
        if (err) {
          var tracer = req.loggingContext.getTracer(__filename);
          tracer.error('Failed to get destinations by tenant ' + req.tenant + ' ' + err);
          return cb(err);
        } else {
          destinationsData.forEach(function(destination){
            if (destination.hasOwnProperty('sap.cloud.service')) {
              var serviceName = destination['sap.cloud.service'];
              destinationBSCredentials[serviceName] = {
                credentials: {
                  destinationName: destination.Name,
                  serviceName: serviceName
                }
              };
              for (var prop in destination) {
                if (prop === 'html5-apps-repo.app_host_id'){
                  destinationBSCredentials[serviceName].credentials['html5-apps-repo'] = {
// eslint-disable-next-line camelcase
                    app_host_id: destination[prop]
                  };
                }
                if (prop === 'grant_type' || prop === 'uri'){
                  destinationBSCredentials[serviceName].credentials[prop] = destination[prop];
                }
                if (prop.startsWith('endpoints')){
                  if (!destinationBSCredentials[serviceName].credentials['endpoints']) {
                    destinationBSCredentials[serviceName].credentials['endpoints'] = {};
                  }
                  var parts = prop.split('.');
                  if (!destinationBSCredentials[serviceName].credentials['endpoints'][parts[1]]){
                    destinationBSCredentials[serviceName].credentials['endpoints'][parts[1]] = {};
                  }
                  destinationBSCredentials[serviceName].credentials['endpoints'][parts[1]][parts[2]] = parts[2] === 'timeout' ? parseInt(destination[prop]) : destination[prop];
                }
                if ((prop === 'clientId' || prop === 'clientSecret' || prop === 'tokenServiceURL' || prop === 'tokenServiceURLType'
                    || prop === 'xsappname' || prop === 'subaccountId' || prop === 'identityZone') && !destinationBSCredentials[serviceName].credentials.hasOwnProperty('uaa')){
                  destinationBSCredentials[serviceName].credentials['uaa'] = {};
                }
                if (prop === 'clientId'){
                  destinationBSCredentials[serviceName].credentials['uaa']['clientid'] = destination[prop];
                }
                if (prop === 'subaccountId'){
                  destinationBSCredentials[serviceName].credentials['uaa']['subaccountid'] = destination[prop];
                }
                if (prop === 'clientSecret'){
                  destinationBSCredentials[serviceName].credentials['uaa']['clientsecret'] = destination[prop];
                }
                if (prop === 'tokenServiceURL'){
                  destinationBSCredentials[serviceName].credentials['uaa']['url'] = destination[prop];
                  var hostname = url.parse(destination[prop]).hostname;
                  destinationBSCredentials[serviceName].credentials['uaa']['identityzone'] = hostname.split('.')[0];
                }
                if (prop === 'xsappname'){
                  destinationBSCredentials[serviceName].credentials['uaa']['xsappname'] = destination[prop];
                }
              }
            }
          });
          destinationBSCredentialsCache.set(req.tenant, destinationBSCredentials);
          return cb();
        }
      });
    } else {
      return cb();
    }
  },

  getEndPoint: function (serviceCredentials, endPointName) {
    var endPoint = {};
    if (endPointName) {
      if (serviceCredentials.endpoints) {
        if (typeof(serviceCredentials.endpoints[endPointName]) === 'string') {
          endPoint.url = serviceCredentials.endpoints[endPointName] + '/';
        } else if (typeof(serviceCredentials.endpoints[endPointName]) === 'object') {
          endPoint.url = serviceCredentials.endpoints[endPointName].url;
          endPoint.timeout = serviceCredentials.endpoints[endPointName].timeout;
        }
      }
      if (serviceCredentials[endPointName]) {
        if (typeof(serviceCredentials[endPointName]) === 'string') {
          endPoint.url = serviceCredentials[endPointName] + '/';
        } else if (typeof(serviceCredentials[endPointName]) === 'object'){
          endPoint.url = serviceCredentials[endPointName].url;
          endPoint.timeout = serviceCredentials[endPointName].timeout;
        }
      }
    } else {
      endPoint.url =  serviceCredentials.url ? serviceCredentials.url + '/' : serviceCredentials.uri + '/';
    }
    endPoint.timeout = endPoint.timeout ? endPoint.timeout : 30000;
    return endPoint;
  },

  getGrantType: function (serviceCredentials){
    if (serviceCredentials.grant_type){
      return serviceCredentials.grant_type;
    }
    return 'user_token';
  },

  getHTML5Applications(req, cb){
    var getApplicationPromises = [];
    var destinationBSCredentials = req.session && req.session.destinationBSCredentials ? req.session.destinationBSCredentials : destinationBSCredentialsCache.get(req.tenant);
    var destinationBSCredentialsEmpty = !destinationBSCredentials || !Object.keys(destinationBSCredentials).length ? true : false;

    if (!destinationBSCredentialsEmpty) {
      for (var sapCloudService in destinationBSCredentials) {
        var cred = destinationBSCredentials[sapCloudService].credentials;
        if (cred['html5-apps-repo'] && cred['html5-apps-repo']['app_host_id']){
          var appHostIds = cred['html5-apps-repo']['app_host_id'].split(',');
          var identityZone = cred.uaa && cred.uaa.identityzone ? cred.uaa.identityzone : req.tenant;
          appHostIds.forEach(function(appHostId){
            getApplicationPromises.push(getApplicationMetadataPromise(req,appHostId,sapCloudService,identityZone));
          });
        }
      }
      Promise.all(getApplicationPromises)
        .then(values => {
          var applications = [];
          values.forEach((value) => {
            let arrToMerge = [applications, value];
            applications = Array.prototype.concat(...arrToMerge);
          });
          cb(null,applications);
        }).catch(reason => {
          cb(reason);
        });
    }
  }
};

function getBSDestination(serviceName, ignoreDots, req) {
  if (!req || !req.tenant){
    return null;
  }
  var destinationBSCredentials = req.session && req.session.destinationBSCredentials ? req.session.destinationBSCredentials : destinationBSCredentialsCache.get(req.tenant);
  var destinationBSCredentialsEmpty = !destinationBSCredentials || !Object.keys(destinationBSCredentials).length ? true : false;

  if (!destinationBSCredentialsEmpty) {
    for (var prop in destinationBSCredentials) {
      var destServiceName = ignoreDots ? prop.replace(/\./g, '') : prop;
      if (destServiceName === serviceName) {
        return destinationBSCredentials[prop].credentials;
      }
    }
  }
  return null;
}

function getApplicationMetadataPromise(req, appHostId, sapCloudService, identityZone){
  return new Promise((resolve,reject) => {
    var html5Cred = xsenv.serviceCredentials({tag: 'html5-apps-repo-rt'});
    var requestOptions = {
      url: html5Cred.uri + '/applications/metadata/',
      headers: {
        Authorization: 'Bearer ' + req.app.services['html5-apps-repo-rt'].token.accessToken
      }
    };
    requestOptions.headers['x-app-host-id'] = appHostId;
    request.get(requestOptions, function onResponse(err, res, body) {
      if (err || res.statusCode !== 200) {
        return reject(err,' Request to get metadata failed');
      }
      var responseJSON = JSON.parse(body);
      responseJSON.forEach(function(app){
        app['sap.cloud.service'] = sapCloudService;
        app['identityZone'] = identityZone;
        app['url'] = 'https://' + urlUtils.getAppRouterHost(req) + '/' + sapCloudService.replace(/\./g, '') + '.' + app.applicationName + '-' + app.applicationVersion;
      });
      resolve(responseJSON);
    });
  });
}