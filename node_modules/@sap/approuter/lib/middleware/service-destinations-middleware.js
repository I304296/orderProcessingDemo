'use strict';

const bsUtils       = require('../utils/business-service-utils');
const urlUtils      = require('../utils/url-utils');
const uaaUtils      = require('../utils/uaa-utils');
const configUtils   = require('../utils/configuration-utils');
const drUtils       = require('../utils/dynamic-routing-utils');
const cookie        = require('cookie');
const urijs         = require('urijs');
const svc2Approuter = require('./service-to-approuter-middleware');

module.exports = function cacheServiceDestination(req, res, next) {
  if (!process.env.SAAS_APPROUTER){
    return next();
  }
  let requestHost = urlUtils.getAppRouterHost(req);
  if (!process.env.TENANT_HOST_PATTERN){
    return next('Tenant host pattern is not defined');
  }
  let tenantHostPattern = configUtils.constructRegExp(process.env.TENANT_HOST_PATTERN);
  if (!tenantHostPattern){
    return next('Failed to extract tenant host pattern');
  }
  req.tenant = uaaUtils.retrieveTenantFromURL(requestHost, tenantHostPattern);
  cacheBSDestinations(req)
    .then(() => checkApprouterAuthorization(req))
    .then(() => getApplications(req,res))
    .then(() => downloadApplication(req,res))
    .then(() => next())
    .catch((err) => {
      next(err);
    });
};
function downloadApplication(req,res){
  return new Promise((resolve) => {
    // eslint-disable-next-line no-undef
    let parsedUrl = urijs.parse(req.url);
    let cookies     = req.headers['cookie'] ? cookie.parse(req.headers['cookie']) : null;
    if (((cookies && cookies.JSESSIONID) || req.headers['x-approuter-authorization']) && parsedUrl.path.startsWith('/applications/content')) {
      resolve(bsUtils.downloadHTML5Application(req,res));
    } else {
      resolve();
    }
  });
}
function getApplications(req,res) {
  return new Promise((resolve,reject) => {
    // eslint-disable-next-line no-undef
    let parsedUrl = urijs.parse(req.url);
    let cookies     = req.headers['cookie'] ? cookie.parse(req.headers['cookie']) : null;
    if (((cookies && cookies.JSESSIONID) || req.headers['x-approuter-authorization']) && parsedUrl.path === '/applications') {
      bsUtils.getHTML5Applications(req, function (err, html5Applications) {
        if (err) {
          return reject(err);
        } else {
          res.setHeader('Content-Type', 'application/json');
          res.end(JSON.stringify(html5Applications, null, 4));
        }
      });
    } else {
      resolve();
    }
  });
}
function cacheBSDestinations(req){
  return new Promise((resolve,reject) => {
    bsUtils.cacheBSDestinations(req, function(err){
      if (err) {
        return reject(err);
      }
      var cookies     = req.headers['cookie'] ? cookie.parse(req.headers['cookie']) : null;
      var source      = cookies && cookies.locationAfterLogin ? {url: cookies.locationAfterLogin} : req;
      var appKey      = drUtils.getApplicationKey(source);
      if (appKey && appKey.appPrefix) {
        var credentials = bsUtils.getCredentials(appKey.appPrefix, true, req);
        if (credentials && credentials.uaa) {
          req.destinationCredentials = credentials;
        }
      }
      resolve();
    });
  });
}
function checkApprouterAuthorization(req){
  return new Promise((resolve,reject) => {
    if (req.headers['x-approuter-authorization']){
      svc2Approuter(req,null,function(err){
        if (err) {
          reject(err);
        } else {
          resolve();
        }
      });
    } else {
      resolve();
    }
  });
}
